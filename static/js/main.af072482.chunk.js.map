{"version":3,"sources":["Components/PrivateRoute.jsx","Components/Contacts.jsx","Components/Login.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["PrivateRoute","Component","component","rest","store","render","props","sessionStorage","getItem","to","Wrapper","styled","div","layout","labelCol","span","wrapperCol","tailLayout","offset","Contacts","React","useState","contacts","setCotcontacts","selected","setSelected","visible","setVisible","selectedRowKeys","setSelectedRowKeys","openNotificationWithIcon","type","message","description","notification","handleEdit","contact","length","rowSelection","onChange","rowKeys","selectedRows","useEffect","a","axios","get","response","newContacts","data","reduce","acc","obj","name","number","key","id","fetchContacts","handleDelete","forEach","delete","filter","el","includes","handleSeach","str","onFinish","values","post","saveEditedContact","put","editedContact","onFinishFailed","errorInfo","console","log","title","onOk","onCancel","initialValues","Item","label","rules","required","htmlType","className","bordered","style","width","remember","Search","onSearch","placeholder","enterButton","onClick","danger","columns","dataIndex","dataSource","Login","history","useHistory","from","useLocation","state","pathname","setItem","username","replace","Password","valuePropName","App","bacename","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+RAgBeA,EAbM,SAAC,GAAD,IACRC,EADQ,EACnBC,UAAgCC,GADb,EACGC,MADH,6CAGnB,kBAAC,IAAD,iBACMD,EADN,CAEEE,OAAQ,SAACC,GAAD,OAAYC,eAAeC,QAAQ,QACzC,kBAACP,EAAcK,GAEf,kBAAC,IAAD,CAAUG,GAAG,gB,qVCFnB,IAAMC,EAAUC,IAAOC,IAAV,KAUPC,EAAS,CACbC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAGJE,EAAa,CACjBD,WAAY,CACVE,OAAQ,EACRH,KAAM,KAsPKI,EAlPE,WAAO,IAAD,EACcC,IAAMC,SAAS,IAD7B,mBACdC,EADc,KACJC,EADI,OAEWH,IAAMC,SAAS,CAAC,GAAI,KAF/B,mBAEdG,EAFc,KAEJC,EAFI,OAGSL,IAAMC,UAAS,GAHxB,mBAGdK,EAHc,KAGLC,EAHK,OAIyBP,IAAMC,SAAS,IAJxC,mBAIdO,EAJc,KAIGC,EAJH,KAWfC,EAA2B,SAACC,EAAMC,EAASC,GAC/CC,IAAaH,GAAM,CACjBC,UACAC,iBAgBEE,EAAa,SAACC,GACbA,EAAQ,GAAGC,OAMLD,EAAQ,GAAGC,OAAS,EAC7BP,EACE,QACA,qDACA,mPAtBJH,GAAW,GAaTG,EACE,QACA,+FACA,+MAaAQ,EAAe,CACnBV,kBACAW,SA5CqB,SAACC,EAASC,GAC/BhB,EAAY,CAACe,EAASC,IACtBZ,EAAmBW,KA6CrBpB,IAAMsB,WAAU,YACK,uCAAG,8BAAAC,EAAA,sEACGC,IAAMC,IAAI,+BADb,OACdC,EADc,OAEdC,EAAcD,EAASE,KAAKC,QAChC,SAACC,EAAKC,GAAN,4BAAkBD,GAAlB,CAAuB,CAAEE,KAAMD,EAAIC,KAAMC,OAAQF,EAAIE,OAAQC,IAAKH,EAAII,QACtE,IAEFhC,EAAewB,GANK,2CAAH,qDAQnBS,KACC,IAEH,IAAMC,EAAY,uCAAG,WAAOrB,GAAP,eAAAO,EAAA,0DACfP,EAAQ,GAAGC,OADI,iCAEXD,EAAQ,GAAGsB,SAAQ,SAACH,GAAD,OAAQX,IAAMe,OAAN,sCAA4CJ,OAF5D,OAGXR,EAAczB,EAASsC,QAAO,SAACC,GAAD,OAASzB,EAAQ,GAAG0B,SAASD,EAAGP,QACpE/B,EAAewB,GACflB,EAAmB,IACnBJ,EAAY,CAAC,GAAI,KACjBK,EAAyB,UAAW,4BAAS,mFAP5B,wBASjBA,EAAyB,QAAS,+FAAqB,mKATtC,4CAAH,sDAaZiC,EAAW,uCAAG,WAAOC,GAAP,eAAArB,EAAA,sEACKC,IAAMC,IAAN,2CAA8CmB,IADnD,QACZlB,EADY,QAEJE,KAAKX,OAOjBd,EAAe,YAAIuB,EAASE,OAN5BlB,EACE,OACA,2GACA,sOANc,2CAAH,sDA0BXmC,EAAQ,uCAAG,WAAOC,GAAP,mBAAAvB,EAAA,sEACQC,IAAMuB,KAAK,8BAA+BD,GADlD,OACTpB,EADS,OAEPE,EAASF,EAATE,KACFZ,EAAU,CAAEkB,IAAKN,EAAKO,GAAIH,KAAMJ,EAAKI,KAAMC,OAAQL,EAAKK,QAC9D9B,EAAe,GAAD,mBAAKD,GAAL,CAAec,KAJd,2CAAH,sDAORgC,EAAiB,uCAAG,WAAOF,GAAP,qBAAAvB,EAAA,sEACDC,IAAMyB,IAAN,sCAAyC7C,EAAS,IAAM0C,GADvD,OAClBpB,EADkB,OAEhBE,EAASF,EAATE,KACFD,EAAczB,EAASsC,QAAO,SAACC,GAAD,OAAQA,EAAGP,MAAQN,EAAKO,MACtDe,EAAgB,CAAEhB,IAAKN,EAAKO,GAAIH,KAAMJ,EAAKI,KAAMC,OAAQL,EAAKK,QACpE9B,EAAe,CAAC+C,GAAF,mBAAoBvB,KALV,2CAAH,sDAQjBwB,EAAiB,SAACC,GAEtBC,QAAQC,IAAI,UAAWF,IAGzB,OACE,kBAAC9D,EAAD,KACE,kBAAC,IAAD,CAAOiE,MAAM,cAAcjD,QAASA,EAASkD,KAxGhC,WACfjD,GAAW,IAuGoDkD,SApG5C,WACnBlD,GAAW,KAoGP,kBAAC,IAAD,iBACMd,EADN,CAEEuC,KAAK,QACL0B,cAAe,CACbzB,OAAQ7B,EAAS,GAAGa,QAAUb,EAAS,GAAG,IAAMA,EAAS,GAAG,GAAG6B,OAC/DD,KAAM5B,EAAS,GAAGa,QAAUb,EAAS,GAAG,IAAMA,EAAS,GAAG,GAAG4B,MAE/Da,SAAUG,EACVG,eAAgBA,IAEhB,kBAAC,IAAKQ,KAAN,CACEC,MAAM,iCACN5B,KAAK,SACL6B,MAAO,CACL,CACEC,UAAU,EACVlD,QAAS,4IAIb,kBAAC,IAAD,OAGF,kBAAC,IAAK+C,KAAN,CACEC,MAAM,qBACN5B,KAAK,OACL6B,MAAO,CACL,CACEC,UAAU,EACVlD,QAAS,gIAIb,kBAAC,IAAD,OAGF,kBAAC,IAAK+C,KAAS9D,EACb,kBAAC,IAAD,CAAQc,KAAK,UAAUoD,SAAS,UAAhC,6DAMN,kBAAC,IAAD,CACEC,UAAU,cACVT,MAAM,8FACNU,UAAU,EACVC,MAAO,CAAEC,MAAO,MAEhB,kBAAC,IAAD,iBACM1E,EADN,CAEEuC,KAAK,QACL0B,cAAe,CACbU,UAAU,GAEZvB,SAAUA,EACVM,eAAgBA,IAEhB,kBAAC,IAAKQ,KAAN,CACEC,MAAM,iCACN5B,KAAK,SACL6B,MAAO,CACL,CACEC,UAAU,EACVlD,QAAS,4IAIb,kBAAC,IAAD,OAGF,kBAAC,IAAK+C,KAAN,CACEC,MAAM,qBACN5B,KAAK,OACL6B,MAAO,CACL,CACEC,UAAU,EACVlD,QAAS,gIAIb,kBAAC,IAAD,OAGF,kBAAC,IAAK+C,KAAS9D,EACb,kBAAC,IAAD,CAAQc,KAAK,UAAUoD,SAAS,UAAhC,6DAMN,kBAAC,IAAD,CAAMR,MAAM,mDAAWU,UAAU,EAAOC,MAAO,CAAEC,MAAO,MACtD,kBAAC,IAAME,OAAP,CACEC,SAAU3B,EACVqB,UAAU,gBACVO,YAAY,+IACZC,aAAW,IAEb,kBAAC,IAAD,CACEC,QAAS,kBAAMpC,EAAajC,IAC5B4D,UAAU,eACVrD,KAAK,UACL+D,QAAM,GAJR,8CAQA,kBAAC,IAAD,CAAQD,QAAS,kBAAM1D,EAAWX,IAAW4D,UAAU,gBAAgBrD,KAAK,WAA5E,wFAGA,kBAAC,IAAD,CAAOO,aAAcA,EAAcyD,QAjJzB,CACd,CACEpB,MAAO,OACPqB,UAAW,OACXzC,GAAI,QAEN,CACEoB,MAAO,SACPqB,UAAW,SACXzC,GAAI,WAwImD0C,WAAY3E,O,QCxQnET,EAAS,CACbC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAGJE,EAAa,CACjBD,WAAY,CACVE,OAAQ,EACRH,KAAM,KAqEKmF,EAjED,WACZ,IAAMC,EAAUC,cAGRC,GAFSC,cAESC,OAAS,CAAEF,KAAM,CAAEG,SAAU,OAA/CH,KAUR,OACE,kBAAC,IAAD,CAAMhB,UAAU,EAAOC,MAAO,CAAEC,MAAO,MACrC,kBAAC,IAAD,iBACM1E,EADN,CAEEuC,KAAK,QACL0B,cAAe,CACjBU,UAAU,GAERvB,SAjBW,SAACC,GAChB3D,eAAekG,QAAQ,OAAQvC,EAAOwC,UACtCP,EAAQQ,QAAQN,GAChB5B,QAAQC,IAAI,WAAYR,IAepBK,eAZiB,SAACC,GACtBC,QAAQC,IAAI,UAAWF,MAanB,kBAAC,IAAKO,KAAN,CACEC,MAAM,WACN5B,KAAK,WACL6B,MAAO,CACV,CACEC,UAAU,EACVlD,QAAS,iCAIR,kBAAC,IAAD,OAGF,kBAAC,IAAK+C,KAAN,CACEC,MAAM,WACN5B,KAAK,WACL6B,MAAO,CACV,CACEC,UAAU,EACVlD,QAAS,iCAIR,kBAAC,IAAM4E,SAAP,OAGF,kBAAC,IAAK7B,KAAN,iBAAe9D,EAAf,CAA2BmC,KAAK,WAAWyD,cAAc,YACvD,kBAAC,IAAD,qBAGF,kBAAC,IAAK9B,KAAS9D,EACb,kBAAC,IAAD,CAAQc,KAAK,UAAUoD,SAAS,UAAhC,c,6NCjEV,IAAMzE,EAAUC,IAAOC,IAAV,KAqBEkG,MAXf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAQC,SAAS,iBACf,kBAAC,EAAD,CAAcC,OAAK,EAACC,KAAK,IAAI/G,UAAWiB,IACxC,kBAAC,IAAD,CAAO8F,KAAK,SAAS/G,UAAWgG,OCfpBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASlH,OACP,kBAAC,IAAMmH,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMlG,c","file":"static/js/main.af072482.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({\r\n  component: Component, store, ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) => (sessionStorage.getItem('user') ? (\r\n      <Component {...props} />\r\n    ) : (\r\n      <Redirect to=\"/login\" />\r\n    ))}\r\n  />\r\n);\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\nimport '../App.scss';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport {\n  Form, Input, Button, Card, Table, notification, Modal,\n} from 'antd';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  padding-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n`;\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Contacts = () => {\n  const [contacts, setCotcontacts] = React.useState([]);\n  const [selected, setSelected] = React.useState([[], []]);\n  const [visible, setVisible] = React.useState(false);\n  const [selectedRowKeys, setSelectedRowKeys] = React.useState([]);\n\n  const onSelectChange = (rowKeys, selectedRows) => {\n    setSelected([rowKeys, selectedRows]);\n    setSelectedRowKeys(rowKeys);\n  };\n\n  const openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description,\n    });\n  };\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    setVisible(false);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n  };\n\n  const handleEdit = (contact) => {\n    if (!contact[0].length) {\n      openNotificationWithIcon(\n        'error',\n        'Контакт не выбран',\n        'Пожалуйста выберите один из контактов',\n      );\n    } else if (contact[0].length > 1) {\n      openNotificationWithIcon(\n        'error',\n        'Так много?',\n        'Пожалуйста выберите только один из контактов',\n      );\n    } else {\n      showModal();\n    }\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n\n  React.useEffect(() => {\n    const fetchContacts = async () => {\n      const response = await axios.get('http://localhost:3004/posts');\n      const newContacts = response.data.reduce(\n        (acc, obj) => [...acc, { name: obj.name, number: obj.number, key: obj.id }],\n        [],\n      );\n      setCotcontacts(newContacts);\n    };\n    fetchContacts();\n  }, []);\n\n  const handleDelete = async (contact) => {\n    if (contact[0].length) {\n      await contact[0].forEach((id) => axios.delete(`http://localhost:3004/posts/${id}`));\n      const newContacts = contacts.filter((el) => !contact[0].includes(el.key));\n      setCotcontacts(newContacts);\n      setSelectedRowKeys([]);\n      setSelected([[], []]);\n      openNotificationWithIcon('success', 'Окей!', 'Контакт удолен');\n    } else {\n      openNotificationWithIcon('error', 'Контакт не выбран', 'Убедитесь что выбрали контакт');\n    }\n  };\n\n  const handleSeach = async (str) => {\n    const response = await axios.get(`http://localhost:3004/posts?name=${str}`);\n    if (!response.data.length) {\n      openNotificationWithIcon(\n        'info',\n        'Нет токого контакта',\n        'Убедитесь в правильности введенного имени',\n      );\n    } else {\n      setCotcontacts([...response.data]);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      id: 'name',\n    },\n    {\n      title: 'Number',\n      dataIndex: 'number',\n      id: 'number',\n    },\n  ];\n\n  const onFinish = async (values) => {\n    const response = await axios.post('http://localhost:3004/posts', values);\n    const { data } = response;\n    const contact = { key: data.id, name: data.name, number: data.number };\n    setCotcontacts([...contacts, contact]);\n  };\n\n  const saveEditedContact = async (values) => {\n    const response = await axios.put(`http://localhost:3004/posts/${selected[0]}`, values);\n    const { data } = response;\n    const newContacts = contacts.filter((el) => el.key !== data.id);\n    const editedContact = { key: data.id, name: data.name, number: data.number };\n    setCotcontacts([editedContact, ...newContacts]);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    // eslint-disable-next-line no-console\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Wrapper>\n      <Modal title=\"Basic Modal\" visible={visible} onOk={handleOk} onCancel={handleCancel}>\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            number: selected[1].length && selected[1][0] && selected[1][0].number,\n            name: selected[1].length && selected[1][0] && selected[1][0].name,\n          }}\n          onFinish={saveEditedContact}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Номер\"\n            name=\"number\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите номер',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Имя\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите имя',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Сохранить\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Card\n        className=\"set-contact\"\n        title=\"Добавить контакт\"\n        bordered={false}\n        style={{ width: 300 }}\n      >\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Номер\"\n            name=\"number\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите номер',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Имя\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите имя',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Отправить\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n      <Card title=\"Контакты\" bordered={false} style={{ width: 300 }}>\n        <Input.Search\n          onSearch={handleSeach}\n          className=\"margin-bottom\"\n          placeholder=\"Введите название контакта\"\n          enterButton\n        />\n        <Button\n          onClick={() => handleDelete(selected)}\n          className=\"margin-right\"\n          type=\"primary\"\n          danger\n        >\n          Удолить\n        </Button>\n        <Button onClick={() => handleEdit(selected)} className=\"margin-bottom\" type=\"primary\">\n          Редактрировать\n        </Button>\n        <Table rowSelection={rowSelection} columns={columns} dataSource={contacts} />\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n","import React from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport {\r\n  Card, Form, Input, Button, Checkbox,\r\n} from 'antd';\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const { from } = location.state || { from: { pathname: '/' } };\r\n  const onFinish = (values) => {\r\n    sessionStorage.setItem('user', values.username);\r\n    history.replace(from);\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <Card bordered={false} style={{ width: 300 }}>\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{\r\n\t\t\t\t  remember: true,\r\n        }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"username\"\r\n          rules={[\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t    required: true,\r\n\t\t\t\t\t    message: 'Please input your username!',\r\n\t\t\t\t\t  },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          rules={[\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t    required: true,\r\n\t\t\t\t\t    message: 'Please input your password!',\r\n\t\t\t\t\t  },\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n          <Checkbox>Remember me</Checkbox>\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport './App.scss';\r\nimport 'antd/dist/antd.css';\r\nimport styled from 'styled-components';\r\nimport PrivateRoute from './Components/PrivateRoute';\r\nimport Contacts from './Components/Contacts';\r\nimport Login from './Components/Login';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  padding-top: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <Wrapper>\r\n      <Router bacename=\"contacts-demo\">\r\n        <PrivateRoute exact path=\"/\" component={Contacts} />\r\n        <Route path=\"/login\" component={Login} />\r\n      </Router>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}