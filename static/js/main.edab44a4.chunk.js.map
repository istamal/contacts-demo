{"version":3,"sources":["Components/PrivateRoute.jsx","Components/Contacts.jsx","Components/Login.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["PrivateRoute","Component","component","rest","store","user","sessionStorage","getItem","render","props","to","Wrapper","styled","div","layout","labelCol","span","wrapperCol","tailLayout","offset","Contacts","React","useState","contacts","setCotcontacts","selected","setSelected","visible","setVisible","openNotificationWithIcon","type","message","description","notification","handleEdit","contact","length","rowSelection","onChange","selectedRowKeys","selectedRows","getCheckboxProps","record","disabled","name","useEffect","a","axios","get","response","newContacts","data","reduce","acc","obj","number","key","id","fetchContacts","handleDelete","forEach","delete","handleSeach","str","onFinish","values","post","saveEditedContact","put","filter","el","editedContact","onFinishFailed","errorInfo","console","log","title","onOk","e","onCancel","initialValues","Item","label","rules","required","htmlType","className","bordered","style","width","remember","Search","onSearch","placeholder","enterButton","onClick","danger","columns","dataIndex","dataSource","Login","history","useHistory","from","useLocation","state","pathname","setItem","username","replace","Password","valuePropName","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.edab44a4.chunk.js","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({\n  component: Component, store, ...rest\n}) => {\n  const user = sessionStorage.getItem('user');\n  return (\n    <Route\n      {...rest}\n      render={(props) => (user ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      ))}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React from 'react';\nimport '../App.scss';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport {\n  Form,\n  Input,\n  Button,\n  Card,\n  Table,\n  notification,\n  Modal,\n} from 'antd';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  padding-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n`;\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Contacts = () => {\n  const [contacts, setCotcontacts] = React.useState([]);\n  const [selected, setSelected] = React.useState([[], []]);\n  const [visible, setVisible] = React.useState(false);\n\n  const openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message,\n      description,\n    });\n  };\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = (e) => {\n    setVisible(false);\n  };\n\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n\n  const handleEdit = (contact) => {\n    if (!contact[0].length) {\n      openNotificationWithIcon('error', 'Контакт не выбран', 'Пожалуйста выберите один из контактов');\n    } else if (contact[0].length > 1) {\n      openNotificationWithIcon('error', 'Так много?', 'Пожалуйста выберите только один из контактов');\n    } else {\n      showModal();\n    }\n  };\n\n  const rowSelection = {\n    onChange: (selectedRowKeys, selectedRows) => {\n      setSelected([selectedRowKeys, selectedRows]);\n    },\n    getCheckboxProps: (record) => ({\n      disabled: record.name === 'Disabled User', // Column configuration not to be checked\n      name: record.name,\n    }),\n  };\n\n  React.useEffect(() => {\n    const fetchContacts = async () => {\n      const response = await axios.get('http://localhost:3004/posts');\n      const newContacts = response.data\n        .reduce((acc, obj) => [...acc, { name: obj.name, number: obj.number, key: obj.id }], []);\n      setCotcontacts(newContacts);\n    };\n    fetchContacts();\n  }, []);\n\n  const handleDelete = async (contact) => {\n    if (contact[0].length) {\n      await contact[0].forEach((id) => axios.delete(`http://localhost:3004/posts/${id}`));\n      openNotificationWithIcon('success', 'Окей!', 'Контакт удолен');\n    } else {\n      openNotificationWithIcon('error', 'Контакт не выбран', 'Убедитесь что выбрали контакт');\n    }\n  };\n\n  const handleSeach = async (str) => {\n    const response = await axios.get(`http://localhost:3004/posts?name=${str}`);\n    if (!response.data.length) {\n      openNotificationWithIcon('info', 'Нет токого контакта', 'Убедитесь в правильности введенного имени');\n    } else {\n      setCotcontacts([...response.data]);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      id: 'name',\n    },\n    {\n      title: 'Number',\n      dataIndex: 'number',\n      id: 'number',\n    },\n  ];\n\n  const onFinish = async (values) => {\n    const response = await axios.post('http://localhost:3004/posts', values);\n    const { data } = response;\n    const contact = { key: data.id, name: data.name, number: data.number };\n    setCotcontacts([...contacts, contact]);\n  };\n\n  const saveEditedContact = async (values) => {\n    const response = await axios.put(`http://localhost:3004/posts/${selected[0]}`, values);\n    const { data } = response;\n    const newContacts = contacts.filter((el) => el.key !== data.id);\n    const editedContact = { key: data.id, name: data.name, number: data.number };\n    setCotcontacts([editedContact, ...newContacts]);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    // eslint-disable-next-line no-console\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Wrapper>\n      <Modal\n        title=\"Basic Modal\"\n        visible={visible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            number: selected[0].length && selected[1][0].number,\n            name: selected[0].length && selected[1][0].name,\n          }}\n          onFinish={saveEditedContact}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Номер\"\n            name=\"number\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите номер',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Имя\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите имя',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Сохранить\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n      <Card className=\"set-contact\" title=\"Добавить контакт\" bordered={false} style={{ width: 300 }}>\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Номер\"\n            name=\"number\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите номер',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Имя\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста введите имя',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Отправить\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n      <Card title=\"Контакты\" bordered={false} style={{ width: 300 }}>\n        <Input.Search onSearch={handleSeach} className=\"margin-bottom\" placeholder=\"Введите название контакта\" enterButton />\n        <Button onClick={() => handleDelete(selected)} className=\"margin-right\" type=\"primary\" danger>Удолить</Button>\n        <Button onClick={() => handleEdit(selected)} className=\"margin-bottom\" type=\"primary\">Редактрировать</Button>\n        <Table\n          rowSelection={{\n            ...rowSelection,\n          }}\n          columns={columns}\n          dataSource={contacts}\n        />\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n  Card, Form, Input, Button, Checkbox,\n} from 'antd';\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nconst Login = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const { from } = location.state || { from: { pathname: '/' } };\n  const onFinish = (values) => {\n    sessionStorage.setItem('user', values.username);\n    history.replace(from);\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n  return (\n    <Card bordered={false} style={{ width: 300 }}>\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n\t\t\t\t  remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"Username\"\n          name=\"username\"\n          rules={[\n\t\t\t\t\t  {\n\t\t\t\t\t    required: true,\n\t\t\t\t\t    message: 'Please input your username!',\n\t\t\t\t\t  },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n\t\t\t\t\t  {\n\t\t\t\t\t    required: true,\n\t\t\t\t\t    message: 'Please input your password!',\n\t\t\t\t\t  },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\nimport './App.scss';\nimport 'antd/dist/antd.css';\nimport styled from 'styled-components';\nimport PrivateRoute from './Components/PrivateRoute';\nimport Contacts from './Components/Contacts';\nimport Login from './Components/Login';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  padding-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n`;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Router basename=\"/contacts-demo\">\n        <PrivateRoute exact path=\"/\" component={Contacts} />\n        <Route path=\"/login\" component={Login} />\n      </Router>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}